openapi: 3.0.0
info:
  title: 顔フィルター共有アプリ API
  version: "1.0.0"
  description: Firebase Authentication による認証付き顔フィルター共有アプリのAPI仕様

servers:
  - url: http://localhost:8080/api
    description: ローカルAPIサーバー

tags:
  - name: USER
    description: ユーザーに関する操作
  - name: FILTER
    description: 顔フィルターに関する操作

components:
  securitySchemes:
    FirebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nickname:
          type: string
          maxLength: 30
        avatarUrl:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    FilterParameters:
      type: object
      required: [brightness, skin, contour, eye, nose, mouth]
      properties:
        brightness: { type: integer, minimum: 0, maximum: 100 }
        skin: { type: integer, minimum: 0, maximum: 100 }
        contour: { type: integer, minimum: 0, maximum: 100 }
        eye: { type: integer, minimum: 0, maximum: 100 }
        nose: { type: integer, minimum: 0, maximum: 100 }
        mouth: { type: integer, minimum: 0, maximum: 100 }

    Filter:
      type: object
      $ref: '#/components/schemas/FilterParameters'
   

security:
  - FirebaseAuth: []

paths:
  /users:
    post:
      tags: [USER]
      summary: ユーザー登録
      description: FirebaseのIDトークンにより認証されたユーザーを登録します。
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nickname]
              properties:
                nickname:
                  type: string
                  maxLength: 30
                avatarUrl:
                  type: string
                  format: uri
                  nullable: true
      responses:
        '201':
          description: ユーザー登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: リクエスト形式不正
        '401':
          description: 認証エラー

    get:
      tags: [USER]
      summary: ユーザー一覧取得
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: ユーザー一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: 認証エラー

  /filter/{userId}:
    get:
      tags: [FILTER]
      summary: 指定ユーザーのフィルター取得
      description: 指定されたユーザーIDに紐づく最新のフィルター情報を1件取得します。
      security:
        - FirebaseAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 指定ユーザーの最新のフィルター
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '401':
          description: 認証エラー
        '404':
          description: フィルターが見つかりません

  /filter:
    post:
      tags: [FILTER]
      summary: フィルター作成
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterParameters'
      responses:
        '201':
          description: フィルター作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: 不正な入力
        '401':
          description: 認証エラー

  /filter/{filterId}:
    patch:
      tags: [FILTER]
      summary: フィルター情報の更新
      security:
        - FirebaseAuth: []
      parameters:
        - in: path
          name: filterId
          required: true
          schema:
            type: string
            format: uuid
          description: 更新対象のフィルターID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
              $ref: '#/components/schemas/FilterParameters'
      responses:
        '200':
          description: 更新されたフィルター情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '400':
          description: 入力不備
        '401':
          description: 認証エラー
        '404':
          description: フィルターが見つかりません