openapi: 3.0.0
info:
  title: 顔フィルター共有アプリ API
  version: '1.0.0'
  description: Firebase Authentication による認証付き顔フィルター共有アプリのAPI仕様

servers:
  - url: http://localhost:8080
    description: ローカルAPIサーバー

tags:
  - name: USER
    description: ユーザーに関する操作
  - name: FILTER
    description: 顔フィルターに関する操作

components:
  securitySchemes:
    FirebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    FilterParameters:
      type: object
      required: [brightness, skin, contour, eye, nose, mouth]
      properties:
        brightness: { type: integer, minimum: 0, maximum: 100 }
        skin: { type: integer, minimum: 0, maximum: 100 }
        contour: { type: integer, minimum: 0, maximum: 100 }
        eye: { type: integer, minimum: 0, maximum: 100 }
        nose: { type: integer, minimum: 0, maximum: 100 }
        mouth: { type: integer, minimum: 0, maximum: 100 }

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nickname:
          type: string
          maxLength: 30
        avatarUrl:
          type: string
          format: uri
          nullable: true
        filter:
          $ref: '#/components/schemas/FilterParameters'
        features:
          type: array
          items:
            type: integer
          nullable: true
          description: 顔特徴量の数値配列
          example: [1, 2, 3]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Filter:
      allOf:
        - $ref: '#/components/schemas/FilterParameters'
        - type: object
          properties:
            userId:
              type: string
              format: uuid

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userIds:
          type: array
          items:
            type: string
            format: uuid
        createdAt:
          type: string
          format: date-time

security:
  - FirebaseAuth: []

paths:
  /api/users:
    put:
      tags: [USER]
      summary: ユーザー登録/更新
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nickname]
              properties:
                nickname:
                  type: string
                  maxLength: 30
                avatarUrl:
                  type: string
                  format: uri
                  nullable: true
                filter:
                  $ref: '#/components/schemas/FilterParameters'
                features:
                  type: array
                  items:
                    type: integer
                  nullable: true
                  description: 特徴の配列
                  example: [1, 2, 3]
      responses:
        '200':
          description: ユーザー登録/更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: リクエスト形式不正
        '401':
          description: 認証エラー

  /api/users/list:
    get:
      tags: [USER]
      summary: ユーザー一覧取得
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: ユーザー一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: 認証エラー

  /api/users/me:
    get:
      tags: [USER]
      summary: 自分のユーザー情報取得
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: 自分のユーザー情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 認証エラー

  /api/filters/{userId}:
    get:
      tags: [FILTER]
      summary: 指定ユーザーのフィルター取得
      security:
        - FirebaseAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 指定ユーザーのフィルター情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '401':
          description: 認証エラー
        '404':
          description: フィルターが見つかりません

  /api/filters/me:
    get:
      tags: [FILTER]
      summary: 自分のフィルター取得
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: 自分のフィルター情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
        '401':
          description: 認証エラー
        '404':
          description: フィルターが見つかりません

  /api/groups:
    put:
      tags: [GROUP]
      summary: グループ作成
      security:
        - FirebaseAuth: []
      responses:
        '201':
          description: グループ作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  userIds:
                    type: array
                    items:
                      type: string
                      format: uuid
                  createdAt:
                    type: string
                    format: date-time
        '401':
          description: 認証エラー

  /api/groups/invite/{groupId}:
    post:
      tags: [GROUP]
      summary: グループ招待
      security:
        - FirebaseAuth: []
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: グループ招待成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          description: 認証エラー
        '404':
          description: グループが見つかりません
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: Group with ID {groupId} not found
                  error:
                    type: string
                    example: Not Found

  /api/groups/{userId}:
    get:
      tags: [GROUP]
      summary: グループ取得
      security:
        - FirebaseAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: グループ取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '401':
          description: 認証エラー
        '404':
          description: ユーザーがグループに所属していません
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: グループに所属していません
                  error:
                    type: string
                    example: Not Found
